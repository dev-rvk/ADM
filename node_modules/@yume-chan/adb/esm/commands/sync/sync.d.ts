import { AutoDisposable } from "@yume-chan/event";
import type { Consumable, ReadableStream } from "@yume-chan/stream-extra";
import type { Adb, AdbSocket } from "../../adb.js";
import type { AdbSyncEntry } from "./list.js";
import { AdbSyncSocket } from "./socket.js";
import type { AdbSyncStat, LinuxFileType } from "./stat.js";
/**
 * A simplified `dirname` function that only handles absolute unix paths.
 * @param path an absolute unix path
 * @returns the directory name of the input path
 */
export declare function dirname(path: string): string;
export interface AdbSyncWriteOptions {
    filename: string;
    file: ReadableStream<Consumable<Uint8Array>>;
    type?: LinuxFileType;
    permission?: number;
    mtime?: number;
    dryRun?: boolean;
}
export declare class AdbSync extends AutoDisposable {
    #private;
    protected _adb: Adb;
    protected _socket: AdbSyncSocket;
    get supportsStat(): boolean;
    get supportsListV2(): boolean;
    get fixedPushMkdir(): boolean;
    get supportsSendReceiveV2(): boolean;
    get needPushMkdirWorkaround(): boolean;
    constructor(adb: Adb, socket: AdbSocket);
    /**
     * Gets information of a file or folder.
     *
     * If `path` points to a symbolic link, the returned information is about the link itself (with `type` being `LinuxFileType.Link`).
     */
    lstat(path: string): Promise<AdbSyncStat>;
    /**
     * Gets the information of a file or folder.
     *
     * If `path` points to a symbolic link, it will be resolved and the returned information is about the target (with `type` being `LinuxFileType.File` or `LinuxFileType.Directory`).
     */
    stat(path: string): Promise<{
        id: import("./response.js").AdbSyncResponseId.Stat;
        readonly type: LinuxFileType;
        readonly permission: number;
        error: import("./stat.js").AdbSyncStatErrorCode;
        dev: bigint;
        ino: bigint;
        mode: number;
        nlink: number;
        uid: number;
        gid: number;
        size: bigint;
        atime: bigint;
        mtime: bigint;
        ctime: bigint;
    }>;
    /**
     * Checks if `path` is a directory, or a symbolic link to a directory.
     *
     * This uses `lstat` internally, thus works on all Android versions.
     */
    isDirectory(path: string): Promise<boolean>;
    opendir(path: string): AsyncGenerator<AdbSyncEntry, void, void>;
    readdir(path: string): Promise<AdbSyncEntry[]>;
    /**
     * Reads the content of a file on device.
     *
     * @param filename The full path of the file on device to read.
     * @returns A `ReadableStream` that contains the file content.
     */
    read(filename: string): ReadableStream<Uint8Array>;
    /**
     * Writes a file on device. If the file name already exists, it will be overwritten.
     *
     * @param options The content and options of the file to write.
     */
    write(options: AdbSyncWriteOptions): Promise<void>;
    dispose(): Promise<void>;
}
//# sourceMappingURL=sync.d.ts.map