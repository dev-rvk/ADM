import { AutoDisposable } from "@yume-chan/event";
import { BufferedReadableStream } from "@yume-chan/stream-extra";
import type { Adb, AdbIncomingSocketHandler } from "../adb.js";
export interface AdbForwardListener {
    deviceSerial: string;
    localName: string;
    remoteName: string;
}
export declare class AdbReverseError extends Error {
    constructor(message: string);
}
export declare class AdbReverseNotSupportedError extends AdbReverseError {
    constructor();
}
export declare class AdbReverseCommand extends AutoDisposable {
    #private;
    protected adb: Adb;
    constructor(adb: Adb);
    protected createBufferedStream(service: string): Promise<BufferedReadableStream>;
    protected sendRequest(service: string): Promise<BufferedReadableStream>;
    list(): Promise<AdbForwardListener[]>;
    /**
     * Add an already existing reverse tunnel. Depends on the transport type, this may not do anything.
     * @param deviceAddress The address to be listened on device by ADB daemon. Or `tcp:0` to choose an available TCP port.
     * @param localAddress The address that listens on the local machine.
     * @returns `tcp:{ACTUAL_LISTENING_PORT}`, If `deviceAddress` is `tcp:0`; otherwise, `deviceAddress`.
     */
    addExternal(deviceAddress: string, localAddress: string): Promise<string>;
    /**
     * @param deviceAddress The address to be listened on device by ADB daemon. Or `tcp:0` to choose an available TCP port.
     * @param handler A callback to handle incoming connections.
     * @param localAddressThe The address that listens on the local machine. May be `undefined` to let the transport choose an appropriate one.
     * @returns `tcp:{ACTUAL_LISTENING_PORT}`, If `deviceAddress` is `tcp:0`; otherwise, `deviceAddress`.
     * @throws {AdbReverseNotSupportedError} If ADB reverse tunnel is not supported on this device when connected wirelessly.
     * @throws {AdbReverseError} If ADB daemon returns an error.
     */
    add(deviceAddress: string, handler: AdbIncomingSocketHandler, localAddress?: string): Promise<string>;
    remove(deviceAddress: string): Promise<void>;
    removeAll(): Promise<void>;
}
//# sourceMappingURL=reverse.d.ts.map