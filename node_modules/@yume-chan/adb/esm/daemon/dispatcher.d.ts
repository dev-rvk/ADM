import type { Consumable, ReadableWritablePair } from "@yume-chan/stream-extra";
import type { AdbIncomingSocketHandler, AdbSocket, Closeable } from "../adb.js";
import type { AdbPacketData, AdbPacketInit } from "./packet.js";
import { AdbCommand } from "./packet.js";
export interface AdbPacketDispatcherOptions {
    calculateChecksum: boolean;
    /**
     * Before Android 9.0, ADB uses `char*` to parse service string,
     * thus requires a null character to terminate.
     *
     * Usually it should have the same value as `calculateChecksum`.
     */
    appendNullToServiceString: boolean;
    maxPayloadSize: number;
    /**
     * The number of bytes the device can send before receiving an ack packet.

     * Set to 0 or any negative value to disable delayed ack.
     * Otherwise the value must be in the range of unsigned 32-bit integer.
     */
    initialDelayedAckBytes: number;
    /**
     * Whether to preserve the connection open after the `AdbPacketDispatcher` is closed.
     */
    preserveConnection?: boolean | undefined;
    debugSlowRead?: boolean | undefined;
}
/**
 * The dispatcher is the "dumb" part of the connection handling logic.
 *
 * Except some options to change some minor behaviors,
 * its only job is forwarding packets between authenticated underlying streams
 * and abstracted socket objects.
 *
 * The `Adb` class is responsible for doing the authentication,
 * negotiating the options, and has shortcuts to high-level services.
 */
export declare class AdbPacketDispatcher implements Closeable {
    #private;
    readonly options: AdbPacketDispatcherOptions;
    get disconnected(): Promise<void>;
    constructor(connection: ReadableWritablePair<AdbPacketData, Consumable<AdbPacketInit>>, options: AdbPacketDispatcherOptions);
    createSocket(service: string): Promise<AdbSocket>;
    addReverseTunnel(service: string, handler: AdbIncomingSocketHandler): void;
    removeReverseTunnel(address: string): void;
    clearReverseTunnels(): void;
    sendPacket(command: AdbCommand, arg0: number, arg1: number, payload?: string | Uint8Array): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=dispatcher.d.ts.map