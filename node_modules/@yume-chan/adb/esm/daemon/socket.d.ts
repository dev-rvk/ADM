import type { Disposable } from "@yume-chan/event";
import type { Consumable, ReadableStream, WritableStream } from "@yume-chan/stream-extra";
import type { AdbSocket } from "../adb.js";
import type { AdbPacketDispatcher } from "./dispatcher.js";
export interface AdbDaemonSocketInfo {
    localId: number;
    remoteId: number;
    localCreated: boolean;
    service: string;
}
export interface AdbDaemonSocketConstructionOptions extends AdbDaemonSocketInfo {
    dispatcher: AdbPacketDispatcher;
    highWaterMark?: number | undefined;
}
export declare class AdbDaemonSocketController implements AdbDaemonSocketInfo, AdbSocket, Disposable {
    #private;
    readonly localId: number;
    readonly remoteId: number;
    readonly localCreated: boolean;
    readonly service: string;
    get readable(): ReadableStream<Uint8Array>;
    readonly writable: WritableStream<Consumable<Uint8Array>>;
    get closed(): Promise<void>;
    get socket(): AdbDaemonSocket;
    constructor(options: AdbDaemonSocketConstructionOptions);
    enqueue(data: Uint8Array): Promise<void>;
    ack(bytes: number): void;
    close(): Promise<void>;
    dispose(): void;
}
/**
 * A duplex stream representing a socket to ADB daemon.
 *
 * To close it, call either `socket.close()`,
 * `socket.readable.cancel()`, `socket.readable.getReader().cancel()`,
 * `socket.writable.abort()`, `socket.writable.getWriter().abort()`,
 * `socket.writable.close()` or `socket.writable.getWriter().close()`.
 */
export declare class AdbDaemonSocket implements AdbDaemonSocketInfo, AdbSocket {
    #private;
    get localId(): number;
    get remoteId(): number;
    get localCreated(): boolean;
    get service(): string;
    get readable(): ReadableStream<Uint8Array>;
    get writable(): WritableStream<Consumable<Uint8Array>>;
    get closed(): Promise<void>;
    constructor(controller: AdbDaemonSocketController);
    close(): Promise<void>;
}
//# sourceMappingURL=socket.d.ts.map