import type { Consumable, ReadableWritablePair } from "@yume-chan/stream-extra";
import type { ValueOrPromise } from "@yume-chan/struct";
import type { AdbBanner } from "./banner.js";
import type { AdbFrameBuffer } from "./commands/index.js";
import { AdbPower, AdbReverseCommand, AdbSubprocess, AdbSync, AdbTcpIpCommand } from "./commands/index.js";
import type { AdbFeature } from "./features.js";
export interface Closeable {
    close(): ValueOrPromise<void>;
}
export interface AdbSocket extends ReadableWritablePair<Uint8Array, Consumable<Uint8Array>>, Closeable {
    get service(): string;
    get closed(): Promise<void>;
}
export type AdbIncomingSocketHandler = (socket: AdbSocket) => ValueOrPromise<void>;
export interface AdbTransport extends Closeable {
    readonly serial: string;
    readonly maxPayloadSize: number;
    readonly banner: AdbBanner;
    readonly disconnected: Promise<void>;
    readonly clientFeatures: readonly AdbFeature[];
    connect(service: string): ValueOrPromise<AdbSocket>;
    addReverseTunnel(handler: AdbIncomingSocketHandler, address?: string): ValueOrPromise<string>;
    removeReverseTunnel(address: string): ValueOrPromise<void>;
    clearReverseTunnels(): ValueOrPromise<void>;
}
export declare class Adb implements Closeable {
    readonly transport: AdbTransport;
    get serial(): string;
    get maxPayloadSize(): number;
    get banner(): AdbBanner;
    get disconnected(): Promise<void>;
    get clientFeatures(): readonly AdbFeature[];
    get deviceFeatures(): AdbFeature[];
    readonly subprocess: AdbSubprocess;
    readonly power: AdbPower;
    readonly reverse: AdbReverseCommand;
    readonly tcpip: AdbTcpIpCommand;
    constructor(transport: AdbTransport);
    canUseFeature(feature: AdbFeature): boolean;
    createSocket(service: string): Promise<AdbSocket>;
    createSocketAndWait(service: string): Promise<string>;
    getProp(key: string): Promise<string>;
    rm(filenames: string | string[], options?: {
        recursive?: boolean;
        force?: boolean;
    }): Promise<string>;
    sync(): Promise<AdbSync>;
    framebuffer(): Promise<AdbFrameBuffer>;
    close(): Promise<void>;
}
//# sourceMappingURL=adb.d.ts.map