import type { ValueOrPromise } from "../utils.js";
export declare class ExactReadableEndedError extends Error {
    constructor();
}
export interface ExactReadable {
    readonly position: number;
    /**
     * Read data from the underlying data source.
     *
     * The stream must return exactly `length` bytes or data. If that's not possible
     * (due to end of file or other error condition), it must throw an {@link ExactReadableEndedError}.
     */
    readExactly(length: number): Uint8Array;
}
export interface AsyncExactReadable {
    readonly position: number;
    /**
     * Read data from the underlying data source.
     *
     * The stream must return exactly `length` bytes or data. If that's not possible
     * (due to end of file or other error condition), it must throw an {@link ExactReadableEndedError}.
     */
    readExactly(length: number): ValueOrPromise<Uint8Array>;
}
//# sourceMappingURL=stream.d.ts.map