import type { AbortSignal, ReadableStream as ReadableStreamType, TransformStream as TransformStreamType, WritableStream as WritableStreamType } from "./types.js";
export * from "./types.js";
/** A controller object that allows you to abort one or more DOM requests as and when desired. */
export interface AbortController {
    /**
     * Returns the AbortSignal object associated with this object.
     */
    readonly signal: AbortSignal;
    /**
     * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
     */
    abort(reason?: any): void;
}
interface AbortControllerConstructor {
    prototype: AbortController;
    new (): AbortController;
}
export declare const AbortController: AbortControllerConstructor;
export type ReadableStream<T = any> = ReadableStreamType<T>;
export declare const ReadableStream: typeof ReadableStreamType;
export type WritableStream<T = any> = WritableStreamType<T>;
export declare const WritableStream: typeof WritableStreamType;
export type TransformStream<I = any, O = any> = TransformStreamType<I, O>;
export declare const TransformStream: typeof TransformStreamType;
//# sourceMappingURL=stream.d.ts.map