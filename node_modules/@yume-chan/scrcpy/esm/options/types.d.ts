import type { ReadableStream, TransformStream } from "@yume-chan/stream-extra";
import type { ValueOrPromise } from "@yume-chan/struct";
import type { ScrcpyBackOrScreenOnControlMessage, ScrcpyControlMessageType, ScrcpyInjectTouchControlMessage, ScrcpySetClipboardControlMessage } from "../control/index.js";
import type { ScrcpyScrollController } from "./1_16/scroll.js";
import type { ScrcpyAudioStreamMetadata, ScrcpyMediaStreamPacket, ScrcpyVideoStream } from "./codec.js";
export declare const DEFAULT_SERVER_PATH = "/data/local/tmp/scrcpy-server.jar";
export interface ScrcpyOptionValue {
    toOptionValue(): string | undefined;
}
export declare function isScrcpyOptionValue(value: unknown): value is ScrcpyOptionValue;
export declare function toScrcpyOptionValue<T>(value: unknown, empty: T): string | T;
export interface ScrcpyEncoder {
    type: "video" | "audio";
    codec?: string;
    name: string;
}
export interface ScrcpyDisplay {
    id: number;
    resolution?: string;
}
export interface ScrcpyOptions<T extends object> {
    readonly defaults: Required<T>;
    readonly controlMessageTypes: readonly ScrcpyControlMessageType[];
    readonly value: Required<T>;
    serialize(): string[];
    /**
     * Set the essential options to let Scrcpy server print out available encoders.
     */
    setListEncoders(): void;
    /**
     * Set the essential options to let Scrcpy server print out available displays.
     */
    setListDisplays(): void;
    /**
     * Parse encoder information from Scrcpy server output
     * @param line One line of Scrcpy server output
     */
    parseEncoder(line: string): ScrcpyEncoder | undefined;
    /**
     * Parse display information from Scrcpy server output
     * @param line One line of Scrcpy server output
     */
    parseDisplay(line: string): ScrcpyDisplay | undefined;
    /**
     * Parse the device metadata from video stream according to the current version and options.
     * @param stream The video stream.
     * @returns
     * A tuple of the video stream and the metadata.
     *
     * The returned video stream may be different from the input stream, and should be used for further processing.
     */
    parseVideoStreamMetadata(stream: ReadableStream<Uint8Array>): ValueOrPromise<ScrcpyVideoStream>;
    parseAudioStreamMetadata(stream: ReadableStream<Uint8Array>): ValueOrPromise<ScrcpyAudioStreamMetadata>;
    createMediaStreamTransformer(): TransformStream<Uint8Array, ScrcpyMediaStreamPacket>;
    serializeInjectTouchControlMessage(message: ScrcpyInjectTouchControlMessage): Uint8Array;
    serializeBackOrScreenOnControlMessage(message: ScrcpyBackOrScreenOnControlMessage): Uint8Array | undefined;
    serializeSetClipboardControlMessage(message: ScrcpySetClipboardControlMessage): Uint8Array;
    createScrollController(): ScrcpyScrollController;
}
export declare abstract class ScrcpyOptionsBase<T extends object, B extends ScrcpyOptions<object>> implements ScrcpyOptions<T> {
    #private;
    protected _base: B;
    abstract get defaults(): Required<T>;
    get controlMessageTypes(): readonly ScrcpyControlMessageType[];
    readonly value: Required<T>;
    constructor(base: B, value: Required<T>);
    abstract serialize(): string[];
    setListEncoders(): void;
    setListDisplays(): void;
    parseEncoder(line: string): ScrcpyEncoder | undefined;
    parseDisplay(line: string): ScrcpyDisplay | undefined;
    /**
     * Parse the device metadata from video stream according to the current version and options.
     * @param stream The video stream.
     * @returns
     * A tuple of the video stream and the metadata.
     *
     * The returned video stream may be different from the input stream, and should be used for further processing.
     */
    parseVideoStreamMetadata(stream: ReadableStream<Uint8Array>): ValueOrPromise<ScrcpyVideoStream>;
    parseAudioStreamMetadata(stream: ReadableStream<Uint8Array>): ValueOrPromise<ScrcpyAudioStreamMetadata>;
    createMediaStreamTransformer(): TransformStream<Uint8Array, ScrcpyMediaStreamPacket>;
    serializeInjectTouchControlMessage(message: ScrcpyInjectTouchControlMessage): Uint8Array;
    serializeBackOrScreenOnControlMessage(message: ScrcpyBackOrScreenOnControlMessage): Uint8Array | undefined;
    serializeSetClipboardControlMessage(message: ScrcpySetClipboardControlMessage): Uint8Array;
    createScrollController(): ScrcpyScrollController;
}
//# sourceMappingURL=types.d.ts.map