// cspell: ignore autosync
import Struct, { placeholder } from "@yume-chan/struct";
import { ScrcpyOptions1_18 } from "./1_18.js";
import { ScrcpyOptionsBase, toScrcpyOptionValue } from "./types.js";
function toSnakeCase(input) {
    return input.replace(/([A-Z])/g, "_$1").toLowerCase();
}
export const ScrcpySetClipboardControlMessage1_21 = new Struct()
    .uint8("type")
    .uint64("sequence")
    .int8("paste", placeholder())
    .uint32("length")
    .string("content", { lengthField: "length" });
export class ScrcpyOptions1_21 extends ScrcpyOptionsBase {
    static DEFAULTS = {
        ...ScrcpyOptions1_18.DEFAULTS,
        clipboardAutosync: true,
    };
    static serialize(options, defaults) {
        // 1.21 changed the format of arguments
        const result = [];
        for (const [key, value] of Object.entries(options)) {
            const serializedValue = toScrcpyOptionValue(value, undefined);
            if (!serializedValue) {
                continue;
            }
            const defaultValue = toScrcpyOptionValue(defaults[key], undefined);
            if (serializedValue == defaultValue) {
                continue;
            }
            result.push(`${toSnakeCase(key)}=${serializedValue}`);
        }
        return result;
    }
    get defaults() {
        return ScrcpyOptions1_21.DEFAULTS;
    }
    constructor(init) {
        super(new ScrcpyOptions1_18(init), {
            ...ScrcpyOptions1_21.DEFAULTS,
            ...init,
        });
    }
    serialize() {
        return ScrcpyOptions1_21.serialize(this.value, this.defaults);
    }
    serializeSetClipboardControlMessage(message) {
        return ScrcpySetClipboardControlMessage1_21.serialize(message);
    }
}
//# sourceMappingURL=1_21.js.map