import Struct from "@yume-chan/struct";
import type { ScrcpySetClipboardControlMessage } from "../control/index.js";
import type { ScrcpyOptionsInit1_18 } from "./1_18.js";
import { ScrcpyOptions1_18 } from "./1_18.js";
import { ScrcpyOptionsBase } from "./types.js";
export interface ScrcpyOptionsInit1_21 extends ScrcpyOptionsInit1_18 {
    clipboardAutosync?: boolean;
}
export declare const ScrcpySetClipboardControlMessage1_21: Struct<{
    type: number;
    sequence: bigint;
    paste: boolean;
    length: number;
    content: string;
}, "length", Record<never, never>, undefined>;
export type ScrcpySetClipboardControlMessage1_21 = (typeof ScrcpySetClipboardControlMessage1_21)["TInit"];
export declare class ScrcpyOptions1_21 extends ScrcpyOptionsBase<ScrcpyOptionsInit1_21, ScrcpyOptions1_18> {
    static readonly DEFAULTS: {
        readonly clipboardAutosync: true;
        readonly logLevel: import("./1_18.js").ScrcpyLogLevel1_18.Debug;
        readonly lockVideoOrientation: import("./1_18.js").ScrcpyVideoOrientation1_18.Unlocked;
        readonly powerOffOnClose: false;
        readonly encoderName: undefined;
        readonly maxSize: 0;
        readonly bitRate: 8000000;
        readonly maxFps: 0;
        readonly tunnelForward: false;
        readonly crop: undefined;
        readonly sendFrameMeta: true;
        readonly control: true;
        readonly displayId: 0;
        readonly showTouches: false;
        readonly stayAwake: false;
        readonly codecOptions: import("./index.js").CodecOptions;
    };
    static serialize<T extends object>(options: T, defaults: Required<T>): string[];
    get defaults(): Required<ScrcpyOptionsInit1_21>;
    constructor(init: ScrcpyOptionsInit1_21);
    serialize(): string[];
    serializeSetClipboardControlMessage(message: ScrcpySetClipboardControlMessage): Uint8Array;
}
//# sourceMappingURL=1_21.d.ts.map