import type { ReadableStream } from "@yume-chan/stream-extra";
import type { ValueOrPromise } from "@yume-chan/struct";
import type { ScrcpyScrollController } from "../1_16/index.js";
import { ScrcpyOptions1_21 } from "../1_21.js";
import type { ScrcpyVideoStream } from "../codec.js";
import { ScrcpyOptionsBase } from "../types.js";
import type { ScrcpyOptionsInit1_22 } from "./init.js";
export declare class ScrcpyOptions1_22 extends ScrcpyOptionsBase<ScrcpyOptionsInit1_22, ScrcpyOptions1_21> {
    static readonly DEFAULTS: {
        readonly downsizeOnError: true;
        readonly sendDeviceMeta: true;
        readonly sendDummyByte: true;
        readonly clipboardAutosync: true;
        readonly logLevel: import("../1_18.js").ScrcpyLogLevel1_18.Debug;
        readonly lockVideoOrientation: import("../1_18.js").ScrcpyVideoOrientation1_18.Unlocked;
        readonly powerOffOnClose: false;
        readonly encoderName: undefined;
        readonly maxSize: 0;
        readonly bitRate: 8000000;
        readonly maxFps: 0;
        readonly tunnelForward: false;
        readonly crop: undefined;
        readonly sendFrameMeta: true;
        readonly control: true;
        readonly displayId: 0;
        readonly showTouches: false;
        readonly stayAwake: false;
        readonly codecOptions: import("../1_16/codec-options.js").CodecOptions;
    };
    get defaults(): Required<ScrcpyOptionsInit1_22>;
    constructor(init: ScrcpyOptionsInit1_22);
    parseVideoStreamMetadata(stream: ReadableStream<Uint8Array>): ValueOrPromise<ScrcpyVideoStream>;
    serialize(): string[];
    createScrollController(): ScrcpyScrollController;
}
//# sourceMappingURL=options.d.ts.map