import type { ScrcpyOptionsInit1_16 } from "./1_16/index.js";
import { ScrcpyOptions1_16 } from "./1_16/index.js";
import type { ScrcpyEncoder } from "./types.js";
import { ScrcpyOptionsBase } from "./types.js";
export interface ScrcpyOptionsInit1_17 extends ScrcpyOptionsInit1_16 {
    encoderName?: string | undefined;
}
export declare class ScrcpyOptions1_17 extends ScrcpyOptionsBase<ScrcpyOptionsInit1_17, ScrcpyOptions1_16> {
    static readonly DEFAULTS: {
        readonly encoderName: undefined;
        readonly logLevel: import("./1_16/init.js").ScrcpyLogLevel1_16.Debug;
        readonly maxSize: 0;
        readonly bitRate: 8000000;
        readonly maxFps: 0;
        readonly lockVideoOrientation: import("./1_16/init.js").ScrcpyVideoOrientation1_16.Unlocked;
        readonly tunnelForward: false;
        readonly crop: undefined;
        readonly sendFrameMeta: true;
        readonly control: true;
        readonly displayId: 0;
        readonly showTouches: false;
        readonly stayAwake: false;
        readonly codecOptions: import("./1_16/codec-options.js").CodecOptions;
    };
    static readonly SERIALIZE_ORDER: readonly ["logLevel", "maxSize", "bitRate", "maxFps", "lockVideoOrientation", "tunnelForward", "crop", "sendFrameMeta", "control", "displayId", "showTouches", "stayAwake", "codecOptions", "encoderName"];
    static parseEncoder(line: string, encoderNameRegex: RegExp): ScrcpyEncoder | undefined;
    get defaults(): Required<ScrcpyOptionsInit1_17>;
    constructor(init: ScrcpyOptionsInit1_17);
    serialize(): string[];
    setListEncoders(): void;
    parseEncoder(line: string): ScrcpyEncoder | undefined;
}
//# sourceMappingURL=1_17.d.ts.map