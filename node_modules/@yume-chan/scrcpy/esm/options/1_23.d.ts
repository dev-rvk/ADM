import { TransformStream } from "@yume-chan/stream-extra";
import type { ScrcpyOptionsInit1_22 } from "./1_22/index.js";
import { ScrcpyOptions1_22 } from "./1_22/index.js";
import type { ScrcpyMediaStreamPacket } from "./codec.js";
import { ScrcpyOptionsBase } from "./types.js";
export interface ScrcpyOptionsInit1_23 extends ScrcpyOptionsInit1_22 {
    cleanup?: boolean;
}
export declare class ScrcpyOptions1_23 extends ScrcpyOptionsBase<ScrcpyOptionsInit1_23, ScrcpyOptions1_22> {
    static readonly DEFAULTS: {
        readonly cleanup: true;
        readonly downsizeOnError: true;
        readonly sendDeviceMeta: true;
        readonly sendDummyByte: true;
        readonly clipboardAutosync: true;
        readonly logLevel: import("./1_18.js").ScrcpyLogLevel1_18.Debug;
        readonly lockVideoOrientation: import("./1_18.js").ScrcpyVideoOrientation1_18.Unlocked;
        readonly powerOffOnClose: false;
        readonly encoderName: undefined;
        readonly maxSize: 0;
        readonly bitRate: 8000000;
        readonly maxFps: 0;
        readonly tunnelForward: false;
        readonly crop: undefined;
        readonly sendFrameMeta: true;
        readonly control: true;
        readonly displayId: 0;
        readonly showTouches: false;
        readonly stayAwake: false;
        readonly codecOptions: import("./index.js").CodecOptions;
    };
    get defaults(): Required<ScrcpyOptionsInit1_23>;
    constructor(init: ScrcpyOptionsInit1_22);
    serialize(): string[];
    createMediaStreamTransformer(): TransformStream<Uint8Array, ScrcpyMediaStreamPacket>;
}
//# sourceMappingURL=1_23.d.ts.map