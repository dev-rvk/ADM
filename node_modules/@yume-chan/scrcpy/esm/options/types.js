export const DEFAULT_SERVER_PATH = "/data/local/tmp/scrcpy-server.jar";
export function isScrcpyOptionValue(value) {
    return (typeof value === "object" &&
        value !== null &&
        "toOptionValue" in value &&
        typeof value.toOptionValue === "function");
}
export function toScrcpyOptionValue(value, empty) {
    if (isScrcpyOptionValue(value)) {
        value = value.toOptionValue();
    }
    // `value` may become `undefined` after `toOptionValue`
    if (value === undefined) {
        return empty;
    }
    if (typeof value !== "string" &&
        typeof value !== "number" &&
        typeof value !== "boolean") {
        throw new Error(`Invalid option value: ${String(value)}`);
    }
    return String(value);
}
export class ScrcpyOptionsBase {
    _base;
    get controlMessageTypes() {
        return this._base.controlMessageTypes;
    }
    value;
    constructor(base, value) {
        this._base = base;
        this.value = value;
        this.#setValue();
    }
    #setValue() {
        // Share `value` with `_base` class,
        // so updating `_base.value` in `_base.setListEncoders()`/
        // `_base.setListDisplays()` will also update `this.value`.
        Object.assign(this._base, { value: this.value });
        if (this._base instanceof ScrcpyOptionsBase) {
            this._base.#setValue();
        }
    }
    setListEncoders() {
        this._base.setListEncoders();
    }
    setListDisplays() {
        this._base.setListDisplays();
    }
    parseEncoder(line) {
        return this._base.parseEncoder(line);
    }
    parseDisplay(line) {
        return this._base.parseDisplay(line);
    }
    /**
     * Parse the device metadata from video stream according to the current version and options.
     * @param stream The video stream.
     * @returns
     * A tuple of the video stream and the metadata.
     *
     * The returned video stream may be different from the input stream, and should be used for further processing.
     */
    parseVideoStreamMetadata(stream) {
        return this._base.parseVideoStreamMetadata(stream);
    }
    parseAudioStreamMetadata(stream) {
        return this._base.parseAudioStreamMetadata(stream);
    }
    createMediaStreamTransformer() {
        return this._base.createMediaStreamTransformer();
    }
    serializeInjectTouchControlMessage(message) {
        return this._base.serializeInjectTouchControlMessage(message);
    }
    serializeBackOrScreenOnControlMessage(message) {
        return this._base.serializeBackOrScreenOnControlMessage(message);
    }
    serializeSetClipboardControlMessage(message) {
        return this._base.serializeSetClipboardControlMessage(message);
    }
    createScrollController() {
        return this._base.createScrollController();
    }
}
//# sourceMappingURL=types.js.map