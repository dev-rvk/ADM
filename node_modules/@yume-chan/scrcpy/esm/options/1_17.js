import { ScrcpyOptions1_16 } from "./1_16/index.js";
import { ScrcpyOptionsBase } from "./types.js";
export class ScrcpyOptions1_17 extends ScrcpyOptionsBase {
    static DEFAULTS = {
        ...ScrcpyOptions1_16.DEFAULTS,
        encoderName: undefined,
    };
    static SERIALIZE_ORDER = [
        ...ScrcpyOptions1_16.SERIALIZE_ORDER,
        "encoderName",
    ];
    static parseEncoder(line, encoderNameRegex) {
        const match = line.match(encoderNameRegex);
        if (match) {
            return { type: "video", name: match[1] };
        }
        return undefined;
    }
    get defaults() {
        return ScrcpyOptions1_17.DEFAULTS;
    }
    constructor(init) {
        super(new ScrcpyOptions1_16(init), {
            ...ScrcpyOptions1_17.DEFAULTS,
            ...init,
        });
    }
    serialize() {
        return ScrcpyOptions1_16.serialize(this.value, ScrcpyOptions1_17.SERIALIZE_ORDER);
    }
    setListEncoders() {
        // Set to an invalid value
        // Server will print valid values before crashing
        // (server will crash after opening video and control sockets)
        this.value.encoderName = "_";
    }
    parseEncoder(line) {
        return ScrcpyOptions1_17.parseEncoder(line, /^\s+scrcpy --encoder-name '([^']+)'$/);
    }
}
//# sourceMappingURL=1_17.js.map