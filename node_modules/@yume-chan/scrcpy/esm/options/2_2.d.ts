import type { ScrcpyOptionsInit2_1 } from "./2_1.js";
import { ScrcpyOptions2_1 } from "./2_1.js";
import type { ScrcpyDisplay } from "./types.js";
import { ScrcpyOptionsBase } from "./types.js";
export interface ScrcpyOptionsInit2_2 extends Omit<ScrcpyOptionsInit2_1, "display"> {
    videoSource?: "display" | "camera";
    displayId?: number;
    cameraId?: string | undefined;
    cameraSize?: string | undefined;
    cameraFacing?: "front" | "back" | "external" | undefined;
    cameraAr?: string | undefined;
    cameraFps?: number | undefined;
    cameraHighSpeed?: boolean;
    listCameras?: boolean;
    listCameraSizes?: boolean;
}
export declare class ScrcpyOptions2_2 extends ScrcpyOptionsBase<ScrcpyOptionsInit2_2, ScrcpyOptions2_1> {
    static readonly DEFAULTS: {
        readonly videoSource: "display";
        readonly displayId: 0;
        readonly cameraId: undefined;
        readonly cameraSize: undefined;
        readonly cameraFacing: undefined;
        readonly cameraAr: undefined;
        readonly cameraFps: undefined;
        readonly cameraHighSpeed: false;
        readonly listCameras: false;
        readonly listCameraSizes: false;
        readonly video: true;
        readonly audioSource: "output";
        readonly scid: import("./2_0.js").ScrcpyInstanceId;
        readonly videoCodec: "h264";
        readonly videoBitRate: 8000000;
        readonly videoCodecOptions: import("./index.js").CodecOptions;
        readonly videoEncoder: "";
        readonly audio: true;
        readonly audioCodec: "opus";
        readonly audioBitRate: 128000;
        readonly audioCodecOptions: import("./index.js").CodecOptions;
        readonly audioEncoder: "";
        readonly listEncoders: false;
        readonly listDisplays: false;
        readonly sendCodecMeta: true;
        readonly logLevel: import("./1_18.js").ScrcpyLogLevel1_18.Debug;
        readonly maxSize: 0;
        readonly maxFps: 0;
        readonly lockVideoOrientation: import("./1_18.js").ScrcpyVideoOrientation1_18.Unlocked;
        readonly tunnelForward: false;
        readonly crop: undefined;
        readonly sendFrameMeta: true;
        readonly control: true;
        readonly showTouches: false;
        readonly stayAwake: false;
        readonly powerOffOnClose: false;
        readonly clipboardAutosync: true;
        readonly downsizeOnError: true;
        readonly sendDeviceMeta: true;
        readonly sendDummyByte: true;
        readonly cleanup: true;
        readonly powerOn: true;
    };
    get defaults(): Required<ScrcpyOptionsInit2_2>;
    constructor(init: ScrcpyOptionsInit2_2);
    parseDisplay(line: string): ScrcpyDisplay | undefined;
    serialize(): string[];
}
//# sourceMappingURL=2_2.d.ts.map