import type { Adb, AdbSubprocessProtocol } from "@yume-chan/adb";
import type { ScrcpyAudioStreamDisabledMetadata, ScrcpyAudioStreamErroredMetadata, ScrcpyAudioStreamSuccessMetadata, ScrcpyDeviceMessage, ScrcpyDisplay, ScrcpyEncoder, ScrcpyMediaStreamPacket, ScrcpyVideoStreamMetadata } from "@yume-chan/scrcpy";
import { ScrcpyControlMessageWriter } from "@yume-chan/scrcpy";
import type { Consumable, ReadableStream, ReadableWritablePair } from "@yume-chan/stream-extra";
import type { AdbScrcpyOptions } from "./options/index.js";
export declare class AdbScrcpyExitedError extends Error {
    output: string[];
    constructor(output: string[]);
}
interface AdbScrcpyClientInit {
    options: AdbScrcpyOptions<object>;
    process: AdbSubprocessProtocol;
    stdout: ReadableStream<string>;
    videoStream: ReadableStream<Uint8Array> | undefined;
    audioStream: ReadableStream<Uint8Array> | undefined;
    controlStream: ReadableWritablePair<Uint8Array, Consumable<Uint8Array>> | undefined;
}
export interface AdbScrcpyVideoStream {
    stream: ReadableStream<ScrcpyMediaStreamPacket>;
    metadata: ScrcpyVideoStreamMetadata;
}
export interface AdbScrcpyAudioStreamSuccessMetadata extends Omit<ScrcpyAudioStreamSuccessMetadata, "stream"> {
    readonly stream: ReadableStream<ScrcpyMediaStreamPacket>;
}
export type AdbScrcpyAudioStreamMetadata = ScrcpyAudioStreamDisabledMetadata | ScrcpyAudioStreamErroredMetadata | AdbScrcpyAudioStreamSuccessMetadata;
export declare class AdbScrcpyClient {
    #private;
    static pushServer(adb: Adb, file: ReadableStream<Consumable<Uint8Array>>, filename?: string): Promise<void>;
    static start(adb: Adb, path: string, version: string, options: AdbScrcpyOptions<object>): Promise<AdbScrcpyClient>;
    /**
     * This method will modify the given `options`,
     * so don't reuse it elsewhere.
     */
    static getEncoders(adb: Adb, path: string, version: string, options: AdbScrcpyOptions<object>): Promise<ScrcpyEncoder[]>;
    /**
     * This method will modify the given `options`,
     * so don't reuse it elsewhere.
     */
    static getDisplays(adb: Adb, path: string, version: string, options: AdbScrcpyOptions<object>): Promise<ScrcpyDisplay[]>;
    get stdout(): ReadableStream<string>;
    get exit(): Promise<number>;
    get screenWidth(): number | undefined;
    get screenHeight(): number | undefined;
    /**
     * Gets a `Promise` that resolves to the parsed video stream.
     *
     * On server version 2.1 and above, it will be `undefined` if
     * video is disabled by `options.video: false`.
     *
     * Note: if it's not `undefined`, it must be consumed to prevent
     * the connection from being blocked.
     */
    get videoStream(): Promise<AdbScrcpyVideoStream> | undefined;
    /**
     * Gets a `Promise` that resolves to the parsed audio stream.
     *
     * On server versions before 2.0, it will always be `undefined`.
     * On server version 2.0 and above, it will be `undefined` if
     * audio is disabled by `options.audio: false`.
     *
     * Note: if it's not `undefined`, it must be consumed to prevent
     * the connection from being blocked.
     */
    get audioStream(): Promise<AdbScrcpyAudioStreamMetadata> | undefined;
    /**
     * Gets the control message writer.
     *
     * On server version 1.22 and above, it will be `undefined` if
     * control is disabled by `options.control: false`.
     */
    get controlMessageWriter(): ScrcpyControlMessageWriter | undefined;
    /**
     * Gets the device message stream.
     *
     * On server version 1.22 and above, it will be `undefined` if
     * control is disabled by `options.control: false`.
     *
     * Note: it must be consumed to prevent the connection from being blocked.
     */
    get deviceMessageStream(): ReadableStream<ScrcpyDeviceMessage> | undefined;
    constructor({ options, process, stdout, videoStream, audioStream, controlStream, }: AdbScrcpyClientInit);
    close(): Promise<void>;
}
export {};
//# sourceMappingURL=client.d.ts.map